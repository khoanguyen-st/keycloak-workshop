// <auto-generated />
using Api.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(KeycloakContext))]
    [Migration("20230308033145_addPost")]
    partial class addPost
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Api.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PostId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("Api.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Permission");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "create-user"
                        },
                        new
                        {
                            Id = 2,
                            Name = "view-user"
                        },
                        new
                        {
                            Id = 3,
                            Name = "delete-user"
                        },
                        new
                        {
                            Id = 4,
                            Name = "update-user"
                        },
                        new
                        {
                            Id = 5,
                            Name = "create-post"
                        },
                        new
                        {
                            Id = 6,
                            Name = "view-post"
                        },
                        new
                        {
                            Id = 7,
                            Name = "delete-post"
                        },
                        new
                        {
                            Id = 8,
                            Name = "update-post"
                        });
                });

            modelBuilder.Entity("Api.Entities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Post");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "admin",
                            Content = "Content 1",
                            Title = "Post 1",
                            Type = "public"
                        },
                        new
                        {
                            Id = 2,
                            Author = "admin",
                            Content = "Content 2",
                            Title = "Post 2",
                            Type = "public"
                        },
                        new
                        {
                            Id = 3,
                            Author = "admin",
                            Content = "Content 3",
                            Title = "Post 3",
                            Type = "public"
                        },
                        new
                        {
                            Id = 4,
                            Author = "admin",
                            Content = "Content 4",
                            Title = "Post 4",
                            Type = "public"
                        },
                        new
                        {
                            Id = 5,
                            Author = "admin",
                            Content = "Content 5",
                            Title = "Post 5",
                            Type = "public"
                        });
                });

            modelBuilder.Entity("Api.Entities.Comment", b =>
                {
                    b.HasOne("Api.Entities.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });
#pragma warning restore 612, 618
        }
    }
}
